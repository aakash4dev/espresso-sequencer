pub use bls_test::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod bls_test {
    pub use super::super::shared_types::*;
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("hashToCurve"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("hashToCurve"),
                        inputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("input"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("bytes"),
                            ),
                        },],
                        outputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::string::String::new(),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint256"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::string::String::new(),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint256"),
                                ),
                            },
                        ],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("hashToField"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("hashToField"),
                        inputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("message"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("bytes"),
                            ),
                        },],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("uint256"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("verifyBlsSig"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("verifyBlsSig"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("message"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("bytes"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("sig"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                ],),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("struct BN254.G1Point"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("pk"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                ],),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("struct BN254.G2Point"),
                                ),
                            },
                        ],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::core::convert::From::from([(
                ::std::borrow::ToOwned::to_owned("BLSSigVerificationFailed"),
                ::std::vec![::ethers::core::abi::ethabi::AbiError {
                    name: ::std::borrow::ToOwned::to_owned("BLSSigVerificationFailed",),
                    inputs: ::std::vec![],
                },],
            )]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static BLSTEST_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x11]\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\x10x\x13\x0E\x14a\0FW\x80c\x1CT\x90\xF2\x14a\0[W\x80c\x95\x96\x1D\xF8\x14a\0\x81W[`\0\x80\xFD[a\0Ya\0T6`\x04a\r\"V[a\0\xA9V[\0[a\0na\0i6`\x04a\r\xD6V[a\0\xB9V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x94a\0\x8F6`\x04a\r\xD6V[a\0\xCAV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\0xV[a\0\xB4\x83\x83\x83a\0\xDFV[PPPV[`\0a\0\xC4\x82a\x01\x91V[\x92\x91PPV[`\0\x80a\0\xD6\x83a\x03\xC4V[\x91P\x91P\x91P\x91V[a\0\xE8\x82a\x04\x97V[`\0`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x10\xE4`$\x919\x90P`\0\x84\x82`@Q` \x01a\x01\x1A\x92\x91\x90a\x0ECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0\x80a\x017\x83a\x03\xC4V[`@\x80Q\x80\x82\x01\x90\x91R\x82\x81R` \x81\x01\x82\x90R\x91\x93P\x91Pa\x01k\x81\x87a\x01^\x8Aa\x05&V[a\x01fa\x05\xA1V[a\x06rV[a\x01\x87W`@Qb\xCE\xD3\xE5`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPV[`\0\x80a\x01\x9D\x83a\x07TV[\x80Q\x90\x91P`0\x81\x14a\x01\xB2Wa\x01\xB2a\x0EXV[`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xCDWa\x01\xCDa\x0C3V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x01\xF7W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0[\x82\x81\x10\x15a\x02rW\x83`\x01a\x02\x12\x83\x86a\x0E\x84V[a\x02\x1C\x91\x90a\x0E\x84V[\x81Q\x81\x10a\x02,Wa\x02,a\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x82\x82\x81Q\x81\x10a\x02IWa\x02Ia\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\x02j\x81a\x0E\xADV[\x91PPa\x01\xFDV[P`@\x80Q`\x1F\x80\x82Ra\x04\0\x82\x01\x90\x92R`\0\x90\x82` \x82\x01a\x03\xE0\x806\x837\x01\x90PP\x90P`\0[\x82\x81\x10\x15a\x03\x0EW\x83\x81a\x02\xB0\x85\x88a\x0E\x84V[a\x02\xBA\x91\x90a\x0E\xC6V[\x81Q\x81\x10a\x02\xCAWa\x02\xCAa\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C\x82\x82\x81Q\x81\x10a\x02\xEAWa\x02\xEAa\x0E\x97V[`\xFF\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R\x80a\x03\x06\x81a\x0E\xADV[\x91PPa\x02\x9CV[P`\0a\x03\x1A\x82a\n\xC6V[\x90Pa\x01\0`\0\x80Q` a\x11\x08\x839\x81Q\x91R`\0a\x03:\x86\x89a\x0E\x84V[\x90P`\0[\x81\x81\x10\x15a\x03\xB4W`\0\x88`\x01a\x03V\x84\x86a\x0E\x84V[a\x03`\x91\x90a\x0E\x84V[\x81Q\x81\x10a\x03pWa\x03pa\x0E\x97V[\x01` \x01Q`\xF8\x1C\x90P\x83\x80a\x03\x88Wa\x03\x88a\x0E\xD9V[\x85\x87\t\x95P\x83\x80a\x03\x9BWa\x03\x9Ba\x0E\xD9V[\x81\x87\x08\x95PP\x80\x80a\x03\xAC\x90a\x0E\xADV[\x91PPa\x03?V[P\x92\x9A\x99PPPPPPPPPPV[`\0\x80`\0a\x03\xD2\x84a\x01\x91V[\x90P`\0\x80Q` a\x11\x08\x839\x81Q\x91R`\x03`\0\x82\x84\x85\t\x90P\x82\x80a\x03\xFBWa\x03\xFBa\x0E\xD9V[\x84\x82\t\x90P\x82\x80a\x04\x0EWa\x04\x0Ea\x0E\xD9V[\x82\x82\x08\x90P`\0\x80a\x04\x1F\x83a\x0B8V[\x92P\x90P[\x80a\x04\x88W\x84\x80a\x047Wa\x047a\x0E\xD9V[`\x01\x87\x08\x95P\x84\x80a\x04KWa\x04Ka\x0E\xD9V[\x86\x87\t\x92P\x84\x80a\x04^Wa\x04^a\x0E\xD9V[\x86\x84\t\x92P\x84\x80a\x04qWa\x04qa\x0E\xD9V[\x84\x84\x08\x92Pa\x04\x7F\x83a\x0B8V[\x92P\x90Pa\x04$V[P\x93\x97\x93\x96P\x92\x94PPPPPV[\x80Q` \x82\x01Q`\0\x91`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x91\x82`\x03\x81\x80\x85\x80\t\x85\t\x08\x83\x82\x83\t\x14\x81\x15\x83\x15\x17\x19\x84\x83\x10\x85\x85\x10\x16\x16\x16\x93PPP\x81a\0\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBn254: invalid G1 point\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01R\x81Q` \x83\x01Q\x15\x90\x15\x16\x15a\x05NWP\x90V[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x84` \x01Qa\x05\x81\x91\x90a\x0E\xEFV[a\x05\x99\x90`\0\x80Q` a\x11\x08\x839\x81Q\x91Ra\x0E\x84V[\x90R\x92\x91PPV[a\x05\xCC`@Q\x80`\x80\x01`@R\x80`\0\x81R` \x01`\0\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81R` \x01\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x81R` \x01\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R` \x01\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81RP\x90P\x90V[`\0\x80`\0`@Q\x87Q\x81R` \x88\x01Q` \x82\x01R\x86Q`@\x82\x01R` \x87\x01Q``\x82\x01R`@\x87\x01Q`\x80\x82\x01R``\x87\x01Q`\xA0\x82\x01R\x85Q`\xC0\x82\x01R` \x86\x01Q`\xE0\x82\x01R\x84Qa\x01\0\x82\x01R` \x85\x01Qa\x01 \x82\x01R`@\x85\x01Qa\x01@\x82\x01R``\x85\x01Qa\x01`\x82\x01R` `\0a\x01\x80\x83`\x08Z\xFA\x91PP`\0Q\x91P\x80a\x07HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FBn254: Pairing check failed!\0\0\0\0`D\x82\x01R`d\x01a\x05\x1DV[P\x15\x15\x95\x94PPPPPV[`@\x80Q`0\x80\x82R``\x82\x81\x01\x90\x93R\x90` \x90`\x01`\xF9\x1B\x90`\0\x90\x84` \x82\x01\x81\x806\x837\x01\x90PP\x90P\x80\x86`@Q` \x01a\x07\x95\x92\x91\x90a\x0ECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80\x84`\xF8\x1B`@Q` \x01a\x07\xBC\x92\x91\x90a\x0F\x11V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80`@Q` \x01a\x07\xDE\x91\x90a\x0F=V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Pa\x01\x01`\xF0\x1B\x90a\x08\x08\x90\x83\x90\x83\x90` \x01a\x0FWV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x81\x84\x01\x81\x90R`\x01`\xF8\x1B\x84\x84\x01R`\x01`\x01`\xF0\x1B\x03\x19\x85\x16`A\x85\x01R\x82Q`#\x81\x86\x03\x01\x81R`C\x90\x94\x01\x90\x92R\x82Q\x90\x83\x01 \x91\x93P\x90`\0`\xFF\x88\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08yWa\x08ya\x0C3V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x08\xA3W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0\x82`@Q` \x01a\x08\xBB\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0[\x81Q\x81\x10\x15a\t0W\x81\x81\x81Q\x81\x10a\x08\xEAWa\x08\xEAa\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x83\x82\x81Q\x81\x10a\t\x07Wa\t\x07a\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\t(\x81a\x0E\xADV[\x91PPa\x08\xCFV[P`\0\x84`@Q` \x01a\tF\x91\x81R` \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R` \x83\x01\x90\x91R`\0\x80\x83R\x91\x98P\x91P[\x89\x81\x10\x15a\t\xE4W`\0\x83\x82\x81Q\x81\x10a\t\x81Wa\t\x81a\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x83\x83\x81Q\x81\x10a\t\x9EWa\t\x9Ea\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x18\x90P\x88\x81`@Q` \x01a\t\xBF\x92\x91\x90a\x0F|V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x98PP\x80\x80a\t\xDC\x90a\x0E\xADV[\x91PPa\teV[P\x86\x88\x87`@Q` \x01a\t\xFA\x93\x92\x91\x90a\x0F\xA1V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x96P\x86\x80Q\x90` \x01 \x93P\x83`@Q` \x01a\n(\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\0[a\nI\x8A`\xFF\x8D\x16a\x0E\x84V[\x81\x10\x15a\n\xB5W\x82\x81\x81Q\x81\x10a\nbWa\nba\x0E\x97V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x84a\n|\x83\x8Da\x0E\xC6V[\x81Q\x81\x10a\n\x8CWa\n\x8Ca\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\n\xAD\x81a\x0E\xADV[\x91PPa\n<V[P\x91\x9B\x9APPPPPPPPPPPV[`\0\x80\x80[\x83Q\x81\x10\x15a\x0B1W\x83\x81\x81Q\x81\x10a\n\xE6Wa\n\xE6a\x0E\x97V[` \x02` \x01\x01Q`\xFF\x16\x81`\x08a\n\xFE\x91\x90a\x0F\xD5V[a\x0B\t\x90`\x02a\x10\xD0V[a\x0B\x13\x91\x90a\x0F\xD5V[a\x0B\x1D\x90\x83a\x0E\xC6V[\x91P\x80a\x0B)\x81a\x0E\xADV[\x91PPa\n\xCBV[P\x92\x91PPV[`\0\x80`\0\x80\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R\x90P`\0`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x90P`@Q` \x81R` \x80\x82\x01R` `@\x82\x01R\x86``\x82\x01R\x82`\x80\x82\x01R\x81`\xA0\x82\x01R` `\0`\xC0\x83`\x05Z\xFA\x93PP`\0Q\x93P\x82a\x0B\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fpow precompile call failed!\0\0\0\0\0`D\x82\x01R`d\x01a\x05\x1DV[\x80`\x01\x85\x90\x1B\x11\x15a\x0C\x13Wa\x0C\x10\x84\x82a\x0E\x84V[\x93P[\x80\x80a\x0C!Wa\x0C!a\x0E\xD9V[\x84\x85\t\x91P\x85\x82\x14\x94PPPP\x91P\x91V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0ClWa\x0Cla\x0C3V[`@R\x90V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0ClWa\x0Cla\x0C3V[`\0\x82`\x1F\x83\x01\x12a\x0C\xA6W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0C\xC1Wa\x0C\xC1a\x0C3V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x0C\xE9Wa\x0C\xE9a\x0C3V[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\r\x02W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[`\0\x80`\0\x83\x85\x03`\xE0\x81\x12\x15a\r8W`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rOW`\0\x80\xFD[a\r[\x87\x82\x88\x01a\x0C\x95V[\x94PP`@`\x1F\x19\x82\x01\x12\x15a\rpW`\0\x80\xFD[a\rxa\x0CIV[` \x86\x81\x015\x82R`@\x87\x015\x90\x82\x01R\x92P`\x80`_\x19\x82\x01\x12\x15a\r\x9DW`\0\x80\xFD[Pa\r\xA6a\x0CrV[``\x85\x015\x81R`\x80\x85\x015` \x82\x01R`\xA0\x85\x015`@\x82\x01R`\xC0\x85\x015``\x82\x01R\x80\x91PP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\r\xE8W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xFFW`\0\x80\xFD[a\x0E\x0B\x84\x82\x85\x01a\x0C\x95V[\x94\x93PPPPV[`\0\x81Q`\0[\x81\x81\x10\x15a\x0E4W` \x81\x85\x01\x81\x01Q\x86\x83\x01R\x01a\x0E\x1AV[P`\0\x93\x01\x92\x83RP\x90\x91\x90PV[`\0a\x0E\x0Ba\x0ER\x83\x86a\x0E\x13V[\x84a\x0E\x13V[cNH{q`\xE0\x1B`\0R`\x01`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\0\xC4Wa\0\xC4a\x0EnV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\x01\x82\x01a\x0E\xBFWa\x0E\xBFa\x0EnV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\0\xC4Wa\0\xC4a\x0EnV[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0\x82a\x0F\x0CWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`\0a\x0F\x1D\x82\x85a\x0E\x13V[`\0\x81R`\x01`\x01`\xF8\x1B\x03\x19\x93\x90\x93\x16`\x01\x84\x01RPP`\x02\x01\x91\x90PV[`\0a\x0FI\x82\x84a\x0E\x13V[`\0\x81R`\x01\x01\x93\x92PPPV[`\0a\x0Fc\x82\x85a\x0E\x13V[`\x01`\x01`\xF0\x1B\x03\x19\x93\x90\x93\x16\x83RPP`\x02\x01\x91\x90PV[`\0a\x0F\x88\x82\x85a\x0E\x13V[`\x01`\x01`\xF8\x1B\x03\x19\x93\x90\x93\x16\x83RPP`\x01\x01\x91\x90PV[`\0a\x0F\xAD\x82\x86a\x0E\x13V[`\x01`\x01`\xF8\x1B\x03\x19\x94\x90\x94\x16\x84RPP`\x01`\x01`\xF0\x1B\x03\x19\x16`\x01\x82\x01R`\x03\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\0\xC4Wa\0\xC4a\x0EnV[`\x01\x81\x81[\x80\x85\x11\x15a\x10'W\x81`\0\x19\x04\x82\x11\x15a\x10\rWa\x10\ra\x0EnV[\x80\x85\x16\x15a\x10\x1AW\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90a\x0F\xF1V[P\x92P\x92\x90PV[`\0\x82a\x10>WP`\x01a\0\xC4V[\x81a\x10KWP`\0a\0\xC4V[\x81`\x01\x81\x14a\x10aW`\x02\x81\x14a\x10kWa\x10\x87V[`\x01\x91PPa\0\xC4V[`\xFF\x84\x11\x15a\x10|Wa\x10|a\x0EnV[PP`\x01\x82\x1Ba\0\xC4V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x10\xAAWP\x81\x81\na\0\xC4V[a\x10\xB4\x83\x83a\x0F\xECV[\x80`\0\x19\x04\x82\x11\x15a\x10\xC8Wa\x10\xC8a\x0EnV[\x02\x93\x92PPPV[`\0a\x10\xDC\x83\x83a\x10/V[\x93\x92PPPV\xFEBLS_SIG_BN254G1_XMD:KECCAK_NCTH_NUL_0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\xA2dipfsX\"\x12 \x958\xBD?\x81\x08\xE9W\x83\xC62\x81\x9D%\xCE\x94B\xCD\x05\\\xC0d\x9B\xE8\x8B\xF9\xEF\x87\xEC\xCAA\xD7dsolcC\0\x08\x14\x003";
    /// The bytecode of the contract.
    pub static BLSTEST_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\x10x\x13\x0E\x14a\0FW\x80c\x1CT\x90\xF2\x14a\0[W\x80c\x95\x96\x1D\xF8\x14a\0\x81W[`\0\x80\xFD[a\0Ya\0T6`\x04a\r\"V[a\0\xA9V[\0[a\0na\0i6`\x04a\r\xD6V[a\0\xB9V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x94a\0\x8F6`\x04a\r\xD6V[a\0\xCAV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\0xV[a\0\xB4\x83\x83\x83a\0\xDFV[PPPV[`\0a\0\xC4\x82a\x01\x91V[\x92\x91PPV[`\0\x80a\0\xD6\x83a\x03\xC4V[\x91P\x91P\x91P\x91V[a\0\xE8\x82a\x04\x97V[`\0`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x10\xE4`$\x919\x90P`\0\x84\x82`@Q` \x01a\x01\x1A\x92\x91\x90a\x0ECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0\x80a\x017\x83a\x03\xC4V[`@\x80Q\x80\x82\x01\x90\x91R\x82\x81R` \x81\x01\x82\x90R\x91\x93P\x91Pa\x01k\x81\x87a\x01^\x8Aa\x05&V[a\x01fa\x05\xA1V[a\x06rV[a\x01\x87W`@Qb\xCE\xD3\xE5`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPV[`\0\x80a\x01\x9D\x83a\x07TV[\x80Q\x90\x91P`0\x81\x14a\x01\xB2Wa\x01\xB2a\x0EXV[`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xCDWa\x01\xCDa\x0C3V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x01\xF7W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0[\x82\x81\x10\x15a\x02rW\x83`\x01a\x02\x12\x83\x86a\x0E\x84V[a\x02\x1C\x91\x90a\x0E\x84V[\x81Q\x81\x10a\x02,Wa\x02,a\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x82\x82\x81Q\x81\x10a\x02IWa\x02Ia\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\x02j\x81a\x0E\xADV[\x91PPa\x01\xFDV[P`@\x80Q`\x1F\x80\x82Ra\x04\0\x82\x01\x90\x92R`\0\x90\x82` \x82\x01a\x03\xE0\x806\x837\x01\x90PP\x90P`\0[\x82\x81\x10\x15a\x03\x0EW\x83\x81a\x02\xB0\x85\x88a\x0E\x84V[a\x02\xBA\x91\x90a\x0E\xC6V[\x81Q\x81\x10a\x02\xCAWa\x02\xCAa\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\xF8\x1C\x82\x82\x81Q\x81\x10a\x02\xEAWa\x02\xEAa\x0E\x97V[`\xFF\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R\x80a\x03\x06\x81a\x0E\xADV[\x91PPa\x02\x9CV[P`\0a\x03\x1A\x82a\n\xC6V[\x90Pa\x01\0`\0\x80Q` a\x11\x08\x839\x81Q\x91R`\0a\x03:\x86\x89a\x0E\x84V[\x90P`\0[\x81\x81\x10\x15a\x03\xB4W`\0\x88`\x01a\x03V\x84\x86a\x0E\x84V[a\x03`\x91\x90a\x0E\x84V[\x81Q\x81\x10a\x03pWa\x03pa\x0E\x97V[\x01` \x01Q`\xF8\x1C\x90P\x83\x80a\x03\x88Wa\x03\x88a\x0E\xD9V[\x85\x87\t\x95P\x83\x80a\x03\x9BWa\x03\x9Ba\x0E\xD9V[\x81\x87\x08\x95PP\x80\x80a\x03\xAC\x90a\x0E\xADV[\x91PPa\x03?V[P\x92\x9A\x99PPPPPPPPPPV[`\0\x80`\0a\x03\xD2\x84a\x01\x91V[\x90P`\0\x80Q` a\x11\x08\x839\x81Q\x91R`\x03`\0\x82\x84\x85\t\x90P\x82\x80a\x03\xFBWa\x03\xFBa\x0E\xD9V[\x84\x82\t\x90P\x82\x80a\x04\x0EWa\x04\x0Ea\x0E\xD9V[\x82\x82\x08\x90P`\0\x80a\x04\x1F\x83a\x0B8V[\x92P\x90P[\x80a\x04\x88W\x84\x80a\x047Wa\x047a\x0E\xD9V[`\x01\x87\x08\x95P\x84\x80a\x04KWa\x04Ka\x0E\xD9V[\x86\x87\t\x92P\x84\x80a\x04^Wa\x04^a\x0E\xD9V[\x86\x84\t\x92P\x84\x80a\x04qWa\x04qa\x0E\xD9V[\x84\x84\x08\x92Pa\x04\x7F\x83a\x0B8V[\x92P\x90Pa\x04$V[P\x93\x97\x93\x96P\x92\x94PPPPPV[\x80Q` \x82\x01Q`\0\x91`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x91\x82`\x03\x81\x80\x85\x80\t\x85\t\x08\x83\x82\x83\t\x14\x81\x15\x83\x15\x17\x19\x84\x83\x10\x85\x85\x10\x16\x16\x16\x93PPP\x81a\0\xB4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBn254: invalid G1 point\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01R\x81Q` \x83\x01Q\x15\x90\x15\x16\x15a\x05NWP\x90V[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x84` \x01Qa\x05\x81\x91\x90a\x0E\xEFV[a\x05\x99\x90`\0\x80Q` a\x11\x08\x839\x81Q\x91Ra\x0E\x84V[\x90R\x92\x91PPV[a\x05\xCC`@Q\x80`\x80\x01`@R\x80`\0\x81R` \x01`\0\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81R` \x01\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x81R` \x01\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R` \x01\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81RP\x90P\x90V[`\0\x80`\0`@Q\x87Q\x81R` \x88\x01Q` \x82\x01R\x86Q`@\x82\x01R` \x87\x01Q``\x82\x01R`@\x87\x01Q`\x80\x82\x01R``\x87\x01Q`\xA0\x82\x01R\x85Q`\xC0\x82\x01R` \x86\x01Q`\xE0\x82\x01R\x84Qa\x01\0\x82\x01R` \x85\x01Qa\x01 \x82\x01R`@\x85\x01Qa\x01@\x82\x01R``\x85\x01Qa\x01`\x82\x01R` `\0a\x01\x80\x83`\x08Z\xFA\x91PP`\0Q\x91P\x80a\x07HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FBn254: Pairing check failed!\0\0\0\0`D\x82\x01R`d\x01a\x05\x1DV[P\x15\x15\x95\x94PPPPPV[`@\x80Q`0\x80\x82R``\x82\x81\x01\x90\x93R\x90` \x90`\x01`\xF9\x1B\x90`\0\x90\x84` \x82\x01\x81\x806\x837\x01\x90PP\x90P\x80\x86`@Q` \x01a\x07\x95\x92\x91\x90a\x0ECV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80\x84`\xF8\x1B`@Q` \x01a\x07\xBC\x92\x91\x90a\x0F\x11V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80`@Q` \x01a\x07\xDE\x91\x90a\x0F=V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x91Pa\x01\x01`\xF0\x1B\x90a\x08\x08\x90\x83\x90\x83\x90` \x01a\x0FWV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x81\x84\x01\x81\x90R`\x01`\xF8\x1B\x84\x84\x01R`\x01`\x01`\xF0\x1B\x03\x19\x85\x16`A\x85\x01R\x82Q`#\x81\x86\x03\x01\x81R`C\x90\x94\x01\x90\x92R\x82Q\x90\x83\x01 \x91\x93P\x90`\0`\xFF\x88\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08yWa\x08ya\x0C3V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x08\xA3W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0\x82`@Q` \x01a\x08\xBB\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0[\x81Q\x81\x10\x15a\t0W\x81\x81\x81Q\x81\x10a\x08\xEAWa\x08\xEAa\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x83\x82\x81Q\x81\x10a\t\x07Wa\t\x07a\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\t(\x81a\x0E\xADV[\x91PPa\x08\xCFV[P`\0\x84`@Q` \x01a\tF\x91\x81R` \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R` \x83\x01\x90\x91R`\0\x80\x83R\x91\x98P\x91P[\x89\x81\x10\x15a\t\xE4W`\0\x83\x82\x81Q\x81\x10a\t\x81Wa\t\x81a\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x83\x83\x81Q\x81\x10a\t\x9EWa\t\x9Ea\x0E\x97V[` \x01\x01Q`\xF8\x1C`\xF8\x1B\x18\x90P\x88\x81`@Q` \x01a\t\xBF\x92\x91\x90a\x0F|V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x98PP\x80\x80a\t\xDC\x90a\x0E\xADV[\x91PPa\teV[P\x86\x88\x87`@Q` \x01a\t\xFA\x93\x92\x91\x90a\x0F\xA1V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x96P\x86\x80Q\x90` \x01 \x93P\x83`@Q` \x01a\n(\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\0[a\nI\x8A`\xFF\x8D\x16a\x0E\x84V[\x81\x10\x15a\n\xB5W\x82\x81\x81Q\x81\x10a\nbWa\nba\x0E\x97V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x84a\n|\x83\x8Da\x0E\xC6V[\x81Q\x81\x10a\n\x8CWa\n\x8Ca\x0E\x97V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81`\0\x1A\x90SP\x80a\n\xAD\x81a\x0E\xADV[\x91PPa\n<V[P\x91\x9B\x9APPPPPPPPPPPV[`\0\x80\x80[\x83Q\x81\x10\x15a\x0B1W\x83\x81\x81Q\x81\x10a\n\xE6Wa\n\xE6a\x0E\x97V[` \x02` \x01\x01Q`\xFF\x16\x81`\x08a\n\xFE\x91\x90a\x0F\xD5V[a\x0B\t\x90`\x02a\x10\xD0V[a\x0B\x13\x91\x90a\x0F\xD5V[a\x0B\x1D\x90\x83a\x0E\xC6V[\x91P\x80a\x0B)\x81a\x0E\xADV[\x91PPa\n\xCBV[P\x92\x91PPV[`\0\x80`\0\x80\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R\x90P`\0`\0\x80Q` a\x11\x08\x839\x81Q\x91R\x90P`@Q` \x81R` \x80\x82\x01R` `@\x82\x01R\x86``\x82\x01R\x82`\x80\x82\x01R\x81`\xA0\x82\x01R` `\0`\xC0\x83`\x05Z\xFA\x93PP`\0Q\x93P\x82a\x0B\xFAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7Fpow precompile call failed!\0\0\0\0\0`D\x82\x01R`d\x01a\x05\x1DV[\x80`\x01\x85\x90\x1B\x11\x15a\x0C\x13Wa\x0C\x10\x84\x82a\x0E\x84V[\x93P[\x80\x80a\x0C!Wa\x0C!a\x0E\xD9V[\x84\x85\t\x91P\x85\x82\x14\x94PPPP\x91P\x91V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0ClWa\x0Cla\x0C3V[`@R\x90V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0ClWa\x0Cla\x0C3V[`\0\x82`\x1F\x83\x01\x12a\x0C\xA6W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0C\xC1Wa\x0C\xC1a\x0C3V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x0C\xE9Wa\x0C\xE9a\x0C3V[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\r\x02W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[`\0\x80`\0\x83\x85\x03`\xE0\x81\x12\x15a\r8W`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rOW`\0\x80\xFD[a\r[\x87\x82\x88\x01a\x0C\x95V[\x94PP`@`\x1F\x19\x82\x01\x12\x15a\rpW`\0\x80\xFD[a\rxa\x0CIV[` \x86\x81\x015\x82R`@\x87\x015\x90\x82\x01R\x92P`\x80`_\x19\x82\x01\x12\x15a\r\x9DW`\0\x80\xFD[Pa\r\xA6a\x0CrV[``\x85\x015\x81R`\x80\x85\x015` \x82\x01R`\xA0\x85\x015`@\x82\x01R`\xC0\x85\x015``\x82\x01R\x80\x91PP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\r\xE8W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xFFW`\0\x80\xFD[a\x0E\x0B\x84\x82\x85\x01a\x0C\x95V[\x94\x93PPPPV[`\0\x81Q`\0[\x81\x81\x10\x15a\x0E4W` \x81\x85\x01\x81\x01Q\x86\x83\x01R\x01a\x0E\x1AV[P`\0\x93\x01\x92\x83RP\x90\x91\x90PV[`\0a\x0E\x0Ba\x0ER\x83\x86a\x0E\x13V[\x84a\x0E\x13V[cNH{q`\xE0\x1B`\0R`\x01`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\0\xC4Wa\0\xC4a\x0EnV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\x01\x82\x01a\x0E\xBFWa\x0E\xBFa\x0EnV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\0\xC4Wa\0\xC4a\x0EnV[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0\x82a\x0F\x0CWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`\0a\x0F\x1D\x82\x85a\x0E\x13V[`\0\x81R`\x01`\x01`\xF8\x1B\x03\x19\x93\x90\x93\x16`\x01\x84\x01RPP`\x02\x01\x91\x90PV[`\0a\x0FI\x82\x84a\x0E\x13V[`\0\x81R`\x01\x01\x93\x92PPPV[`\0a\x0Fc\x82\x85a\x0E\x13V[`\x01`\x01`\xF0\x1B\x03\x19\x93\x90\x93\x16\x83RPP`\x02\x01\x91\x90PV[`\0a\x0F\x88\x82\x85a\x0E\x13V[`\x01`\x01`\xF8\x1B\x03\x19\x93\x90\x93\x16\x83RPP`\x01\x01\x91\x90PV[`\0a\x0F\xAD\x82\x86a\x0E\x13V[`\x01`\x01`\xF8\x1B\x03\x19\x94\x90\x94\x16\x84RPP`\x01`\x01`\xF0\x1B\x03\x19\x16`\x01\x82\x01R`\x03\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\0\xC4Wa\0\xC4a\x0EnV[`\x01\x81\x81[\x80\x85\x11\x15a\x10'W\x81`\0\x19\x04\x82\x11\x15a\x10\rWa\x10\ra\x0EnV[\x80\x85\x16\x15a\x10\x1AW\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90a\x0F\xF1V[P\x92P\x92\x90PV[`\0\x82a\x10>WP`\x01a\0\xC4V[\x81a\x10KWP`\0a\0\xC4V[\x81`\x01\x81\x14a\x10aW`\x02\x81\x14a\x10kWa\x10\x87V[`\x01\x91PPa\0\xC4V[`\xFF\x84\x11\x15a\x10|Wa\x10|a\x0EnV[PP`\x01\x82\x1Ba\0\xC4V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x10\xAAWP\x81\x81\na\0\xC4V[a\x10\xB4\x83\x83a\x0F\xECV[\x80`\0\x19\x04\x82\x11\x15a\x10\xC8Wa\x10\xC8a\x0EnV[\x02\x93\x92PPPV[`\0a\x10\xDC\x83\x83a\x10/V[\x93\x92PPPV\xFEBLS_SIG_BN254G1_XMD:KECCAK_NCTH_NUL_0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\xA2dipfsX\"\x12 \x958\xBD?\x81\x08\xE9W\x83\xC62\x81\x9D%\xCE\x94B\xCD\x05\\\xC0d\x9B\xE8\x8B\xF9\xEF\x87\xEC\xCAA\xD7dsolcC\0\x08\x14\x003";
    /// The deployed bytecode of the contract.
    pub static BLSTEST_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct BLSTest<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for BLSTest<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for BLSTest<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for BLSTest<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for BLSTest<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(BLSTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> BLSTest<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                BLSTEST_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                BLSTEST_ABI.clone(),
                BLSTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `hashToCurve` (0x95961df8) function
        pub fn hash_to_curve(
            &self,
            input: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, ::ethers::core::types::U256),
        > {
            self.0
                .method_hash([149, 150, 29, 248], input)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `hashToField` (0x1c5490f2) function
        pub fn hash_to_field(
            &self,
            message: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([28, 84, 144, 242], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verifyBlsSig` (0x1078130e) function
        pub fn verify_bls_sig(
            &self,
            message: ::ethers::core::types::Bytes,
            sig: G1Point,
            pk: G2Point,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 120, 19, 14], (message, sig, pk))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for BLSTest<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `BLSSigVerificationFailed` with signature `BLSSigVerificationFailed()` and selector `0x0ced3e50`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "BLSSigVerificationFailed", abi = "BLSSigVerificationFailed()")]
    pub struct BLSSigVerificationFailed;
    ///Container type for all input parameters for the `hashToCurve` function with signature `hashToCurve(bytes)` and selector `0x95961df8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "hashToCurve", abi = "hashToCurve(bytes)")]
    pub struct HashToCurveCall {
        pub input: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `hashToField` function with signature `hashToField(bytes)` and selector `0x1c5490f2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "hashToField", abi = "hashToField(bytes)")]
    pub struct HashToFieldCall {
        pub message: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `verifyBlsSig` function with signature `verifyBlsSig(bytes,(uint256,uint256),(uint256,uint256,uint256,uint256))` and selector `0x1078130e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "verifyBlsSig",
        abi = "verifyBlsSig(bytes,(uint256,uint256),(uint256,uint256,uint256,uint256))"
    )]
    pub struct VerifyBlsSigCall {
        pub message: ::ethers::core::types::Bytes,
        pub sig: G1Point,
        pub pk: G2Point,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum BLSTestCalls {
        HashToCurve(HashToCurveCall),
        HashToField(HashToFieldCall),
        VerifyBlsSig(VerifyBlsSigCall),
    }
    impl ::ethers::core::abi::AbiDecode for BLSTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <HashToCurveCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::HashToCurve(decoded));
            }
            if let Ok(decoded) = <HashToFieldCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::HashToField(decoded));
            }
            if let Ok(decoded) = <VerifyBlsSigCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::VerifyBlsSig(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BLSTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::HashToCurve(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::HashToField(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::VerifyBlsSig(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for BLSTestCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::HashToCurve(element) => ::core::fmt::Display::fmt(element, f),
                Self::HashToField(element) => ::core::fmt::Display::fmt(element, f),
                Self::VerifyBlsSig(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<HashToCurveCall> for BLSTestCalls {
        fn from(value: HashToCurveCall) -> Self {
            Self::HashToCurve(value)
        }
    }
    impl ::core::convert::From<HashToFieldCall> for BLSTestCalls {
        fn from(value: HashToFieldCall) -> Self {
            Self::HashToField(value)
        }
    }
    impl ::core::convert::From<VerifyBlsSigCall> for BLSTestCalls {
        fn from(value: VerifyBlsSigCall) -> Self {
            Self::VerifyBlsSig(value)
        }
    }
    ///Container type for all return fields from the `hashToCurve` function with signature `hashToCurve(bytes)` and selector `0x95961df8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct HashToCurveReturn(
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all return fields from the `hashToField` function with signature `hashToField(bytes)` and selector `0x1c5490f2`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct HashToFieldReturn(pub ::ethers::core::types::U256);
}
