@startuml
skinparam componentStyle rectangle

component User #White

package L1 {
  component "Rollup Contract" as Rollup {
    component "Data for Each Batch" as BatchData {
      component "Proposed States" as Proposal {
        component "State Root" as Root
        component "Stake"
        component "Challenge State" as Challenge
      }
    }
  }

  component "Sequencer Contract" as SequencerContract {
    component "Batch Commitments" as BatchComm
  }
}


package "L2 (Optimistic Rollup)" as L2 {
  component Proposer
  component Challenger
  component "Full Node (w/ JSON-RPC)" as RPC
}

component "Espresso Sequencer" as Sequencer

RPC -up-> User : Read state
User -down-> RPC : Transactions
note right of link
1. User reads the current state from a full node
   and builds and submits a transaction.
end note

RPC -right-> Sequencer : Transactions
note top of link
2. Full node forwards
   transactions to sequencer.
end note
Sequencer -down-> BatchComm : Batch Commitment
note right of link
3. Sequencer sends finalized batch commitments to L1
end note

Sequencer -> Proposer : Read batches
Proposer -down-> Root : State
note right of link
4. State proposer reads
   batches from sequencer node,
   compares to the commitments on L1,
   executes them, and
   proposes the new state.
end note

Sequencer -> Challenger : Read batches
Proposal -> Challenger : Read proposal
note right of link
5. Other nodes act as challengers.
   They execute the same batches.
   If they compute a different state,
   they initiate a challenge. Otherwise,
   some architectures may allow them to
   add stake to the proposed state to show
   they agree with it.
end note
Challenger -down-> Rollup : Stake or challenge

Rollup -up-> RPC : State
note right of link
6. Full nodes update their state based on the L1.

   They can read states from the L1 with different
   levels of finality:
   * proposed: fast pre-confirmation, may be rolled
     back if challenged.
   * staked: a large amount of stake has been placed
     on a proposed state which will be lost if it is
     rolled back, providing relatively fast
     cryptoeconomic finality.
   * finalized: the full challenge period (often 1 week)
     has passed, and the state has not been successfully
     challenged. Now it can never be rolled back.
  A full node can also read directly from the sequencer
  and execute the blocks itself, for the fastest possible
  trust-minimized finality.
end note

BatchComm -up-> Challenge : Read batch commitment\nto arbitrate challenge

' Layout
RPC -down[hidden]-> Challenger
RPC -down[hidden]-> Proposer

@enduml
